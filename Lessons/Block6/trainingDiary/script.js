"use strict";

const form = document.querySelector(".form");
const containerWorkouts = document.querySelector(".workouts");
const inputType = document.querySelector(".form__input--type");
const inputDistance = document.querySelector(".form__input--distance");
const inputDuration = document.querySelector(".form__input--duration");
const inputCadence = document.querySelector(".form__input--cadence");
const inputElevation = document.querySelector(".form__input--elevation");
const btnReset = document.querySelector(".btn--reset");

class Workout {   //–ö–ª–∞—Å —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
  date = new Date();
  id = (Date.now() + "").slice(-10);
  constructor(coords, distance, duration) {
    this.coords = coords;
    this.distance = distance;
    this.duration = duration;
  }
  _setDescription() {
    const months = [
      "January", "February", "March", "April", "May", "June", "July",
      "August", "September", "October", "November", "December",
    ];
    this.description = `${this.type[0].toUpperCase()}${this.type.slice(1)}
    ${months[this.date.getMonth()]} ${this.date.getDate()}`;
  }
}

class Running extends Workout {
  type = "running";
  constructor(coords, distance, duration, cadence) {
    super(coords, distance, duration);
    this.cadence = cadence;
    this.calcPace();
    this._setDescription();
  }
  calcPace() {
    this.pace = this.duration / this.distance;
    return this.pace;
  }
}

class Cycling extends Workout {
  type = "cycling";
  constructor(coords, distance, duration, elevation) {
    super(coords, distance, duration);
    this.elevation = elevation;
    this.calcSpeed();
    this._setDescription();
  }
  calcSpeed() {
    this.speed = this.distance * this.duration / 60;
    return this.speed;
  }
}

class App {
  _workouts = [];
  _map;
  _mapEvent;
  constructor() {
    this._getPosition(); //–∑–∞–ø—É—Å–∫ –ª–æ–≥—ñ–∫–∏ –∑–∞—Å—Ç–æ—Å—É–Ω–∫–∞
    this._getLocalStorage(); //–û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–Ω–∏—Ö –∑ LS
    form.addEventListener("submit", this._newWorkout.bind(this));//–æ–±—Ä–æ–±–∫–∞ –ø–æ–¥—ñ—ó, –º–µ—Ç–æ–¥ _newWorkout
    inputType.addEventListener("change", this._toogleField);//–æ–±—Ä–æ–±–∫–∞ –ø–æ–¥—ñ—ó, –º–µ—Ç–æ–¥ _toogleField 
    containerWorkouts.addEventListener("click", this._moveToPopup.bind(this));//–æ–±—Ä–æ–±–∫–∞ –ø–æ–¥—ñ—ó, –ø–ª–∞–≤–Ω–µ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –º—ñ–∂ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è–º–∏ 
    btnReset.addEventListener("click", this.reset);
  };
  _getPosition() { //–º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞ –¥–∞–Ω–Ω–∏—Ö –æ –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –≤ —Ä–∞–∑—ñ —É—Å–ø—ñ—Ö—É –∑–∞–ø—É—Å–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é _loadMap
    if (navigator.geolocation)
      navigator.geolocation.getCurrentPosition(this._loadMap.bind(this),

        function () { // –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ —É –≤–∏–ø–∞–¥–∫—É –≤—ñ–¥–∫–∞–∑—É –Ω–∞–¥–∞–≤–∞—Ç–∏ –¥–æ–∑–≤—ñ–ª –Ω–∞ –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è
          alert("–í–∏ –Ω–µ –Ω–∞–¥–∞–ª–∏ –¥–æ—Å—Ç—É–ø –¥–æ —Å–≤–æ—î—ó –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó");
        }
      )
  };
  _loadMap(position) { //–º–µ—Ç–æ–¥ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–∞—Ä—Ç–∏ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
    //console.log(position);
    const { latitude, longitude } = position.coords;
    const coords = [latitude, longitude];
    this._map = L.map('map').setView(coords, 13);

    L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
    }).addTo(this._map);

    L.marker(coords)//–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –º–æ–≥–æ –º—ñ—Å—Ç—Ü—è –ø–µ—Ä–µ–±—É–≤–∞–Ω–Ω—è
      .addTo(this._map)
      .bindPopup('–†—ñ–¥–Ω–∏–π –¥—ñ–º')
      .openPopup();

    this._map.on("click", this._showForm.bind(this)); //–æ–±—Ä–æ–±–∫–∞ –ø–æ–¥—ñ—ó –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –ø–æ –º–∞–ø—ñ, –º–µ—Ç–æ–¥ _showForm

    this._workouts.forEach((work) => this._renderWorkMarket(work));// –ø—ñ–¥–≥—Ä—É–∂–∞—î–º–æ –Ω–∞—à—ñ –º—ñ—Ç–∫–∏
  };
  _showForm(mapE) { //–º–µ—Ç–æ–¥ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏ –ø—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ –Ω–∞ –º–∞–ø—É
    this._mapEvent = mapE;
    //console.log(mapEvent);
    form.classList.remove("hidden");
    inputDistance.focus();
  };
  _toogleField() {
    inputCadence.closest(".form__row").classList.toggle("form__row--hidden");
    inputElevation.closest(".form__row").classList.toggle("form__row--hidden");
  };
  //–º–µ—Ç–æ–¥ –Ω–∞–Ω–µ—Å–µ–Ω–Ω—è –º–∞—Ä–∫–µ—Ä–∞ –Ω–∞ –º–∞–ø—É
  _newWorkout(e) {
    e.preventDefault();

    // –§—É–Ω–∫—Ü—ñ—è –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —Ü—ñ–ª–æ–≥–æ —á–∏—Å–ª–∞, –ø–æ–≤–µ—Ä—Ç–∞–µ true/fals
    const validInputs = (...inputs) => inputs.every((inp) => Number.isFinite(inp));
    // –§—É–Ω–∫—Ü—ñ—è –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –¥–æ–¥–∞—Ç–Ω–æ–≥–æ —á–∏—Å–ª–∞, –ø–æ–≤–µ—Ä—Ç–∞–µ true/fals
    const allPositive = (...inputs) => inputs.every((inp) => inp > 0);

    //–î–∞–Ω–Ω—ñ –∑ —Ñ–æ—Ä–º
    const type = inputType.value;
    const distance = +inputDistance.value; //–æ–¥—Ä–∞–∑—É –∫–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ —á–∏—Å–ª–æ –∑–∞–¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫
    const duration = +inputDuration.value; //–æ–¥—Ä–∞–∑—É –∫–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ —á–∏—Å–ª–æ –∑–∞–¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫
    const { lat, lng } = this._mapEvent.latlng;
    let workout;

    if (type === "running") { //–ë—ñ–≥
      const cadence = +inputCadence.value;
      if (
        //!Number.isFinite(distance) ||
        //!Number.isFinite(duration) ||
        //!Number.isFinite(cadence) //–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —á–∏—Å–ª–æ 
        !validInputs(distance, duration, cadence) ||
        !allPositive(distance, duration, cadence)
      ) {
        return alert("–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ü—ñ–ª–µ –¥–æ–¥–∞—Ç–Ω–µ —á–∏—Å–ª–æ!")
      }

      workout = new Running([lat, lng], distance, duration, cadence);
      console.log(workout);
    }

    if (type === "cycling") { //–í–µ–ª–æ—Å–∏–ø–µ–¥
      const elevation = +inputElevation.value;

      if (
        !validInputs(distance, duration, elevation) ||
        !allPositive(distance, duration) // elevation –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥'—î–º–Ω–∏–º
      ) {
        return alert("–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ü—ñ–ª–µ –¥–æ–¥–∞—Ç–Ω–µ —á–∏—Å–ª–æ!")
      }
      workout = new Cycling([lat, lng], distance, duration, elevation);

    }
    this._workouts.push(workout);
    console.log(this._workouts);

    //–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞–Ω–Ω–∏—Ö –Ω–∞ –∫–æ—Ä–µ–∫—Ç–Ω—ñ—Å—Ç—å

    //–Ø–∫—â–æ —Ü–µ –ø—Ä–æ–±—ñ–∂–∫–∞ —Å—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç –ø—Ä–æ–±—ñ–∂–∫–∏

    //–Ø–∫—â–æ —Ü–µ –≤–µ–ª–æ—Å–∏–ø–µ–¥ —Ç–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç –≤–µ–ª–æ—Å–∏–ø–µ–¥

    //–î–æ–¥–∞—Ç–∏ –æ–±'—î–∫—Ç –≤ –º–∞—Å–∏–≤ warkout




    //–†–µ–Ω–¥–µ—Ä –º–∞—Ä–∫–µ—Ä–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–∞ –º–∞–ø—ñ
    this._renderWorkMarket(workout);
    this._renderWorout(workout);
    this._hideForm();
    this._setLocalStorage();
  };

  //–û—á–∏—â–µ–Ω–Ω—è –ø–æ–ª—è –≤–≤–æ–¥—É –ø—Ä–∏—Ö–æ–≤–∞–Ω–Ω–Ω—è —Ñ–æ—Ä–º–∏
  _hideForm() {
    inputDistance.value =
      inputDuration.value =
      inputCadence.value =
      inputElevation.value = "";
    form.classList.add("hidden")
  }

  _renderWorkMarket(workout) {
    L.marker(workout.coords)
      .addTo(this._map)
      .bindPopup(
        L.popup({
          maxWidth: 250,
          minWidth: 100,
          autoClose: false,
          closeOnClick: false,
          className: "mark-popup",
        })
      )
      .setPopupContent(`${workout.type === "running" ? "üèÉ‚Äç‚ôÇÔ∏è" : "üö¥"} ${workout.description} –∫–º`)
      .openPopup();
  }

  //–†–µ–Ω–¥–µ—Ä —Å–ø–∏—Å–∫—É —Ç—Ä–µ–Ω—É–≤–∞–Ω—å
  _renderWorout(workout) {
    let html =
      `<li class="workout workout--${workout.type}" data-id="${workout.id}">
        <h2 class="workout__title">${workout.description}</h2>
        <div class="workout__details">
          <span class="workout__icon">${workout.type === "running" ? "üèÉ‚Äç‚ôÇÔ∏è" : "üö¥"}</span>
      <span class="workout__value">${workout.distance}</span>
        <span class="workout__unit">–∫–º</span>
        </div >
      <div class="workout__details">
        <span class="workout__icon">‚è±</span>
        <span class="workout__value">${workout.duration}</span>
        <span class="workout__unit">—Ö–≤</span>
      </div>
    `;
    if (workout.type === "running") {
      html +=
        `<div class="workout__details">
          <span class="workout__icon">‚ö°Ô∏è</span>
          <span class="workout__value">${workout.pace.toFixed(1)}</span>
          <span class="workout__unit">—Ö–≤/–∫–º</span>
        </div>
        <div class="workout__details">
          <span class="workout__icon">ü¶∂üèº</span>
          <span class="workout__value">${workout.cadence}</span>
          <span class="workout__unit">–∫—Ä–æ–∫</span>
        </div>
        </li>
      `;
    }
    if (workout.type === "cycling") {
      html += `<div class="workout__details">
            <span class="workout__icon">‚ö°Ô∏è</span>
            <span class="workout__value">${workout.speed.toFixed(1)}</span>
            <span class="workout__unit">–∫–º/–≥–æ–¥</span>
          </div>
          <div class="workout__details">
            <span class="workout__icon">‚õ∞</span>
            <span class="workout__value">${workout.elevation}</span>
            <span class="workout__unit">–º</span>
          </div>
        </li>`;
    }
    form.insertAdjacentHTML("afterend", html);
  }

  _moveToPopup(e) {
    const workoutEL = e.target.closest(".workout");
    if (!workoutEL) return;
    const workout = this._workouts.find((work) => work.id === workoutEL.dataset.id);
    this._map.setView(workout.coords, 13, { animate: true, pan: { duration: 1 } });
  }

  _setLocalStorage() {
    localStorage.setItem("workouts", JSON.stringify(this._workouts));
  }
  _getLocalStorage() {
    const data = JSON.parse(localStorage.getItem("workouts"));
    if (!data) return;
    this._workouts = data;
    this._workouts.forEach((work) => this._renderWorout(work));

  }
  reset() {
    localStorage.removeItem("workouts");
    location.reload();
  }
}

const app = new App();
app._getPosition;



